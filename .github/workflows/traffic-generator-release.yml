name: traffic-generator-release
on:
  push:
    branches:
      - main
    paths:
      - version
      - "**/traffic-generator-release.yml"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.19
        uses: actions/setup-go@v1
        with:
          go-version: 1.19
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: go mod download

      - name: Get traffic-generator version
        id: get_version
        run: |
          echo "version=$(cat version)" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-list -1 HEAD)" >> $GITHUB_OUTPUT

      - name: Build Windows executable
        run: GOOS=windows go build  -ldflags "-X main.Version=$(cat version) -X main.LastCommit=$(git rev-list -1 HEAD)" -o ./windows/traffic-generator.exe

      - name: Build Mac executable
        run: GOOS=darwin go build -ldflags "-X main.Version=$(cat version) -X main.LastCommit=$(git rev-list -1 HEAD)" -o ./mac/traffic-generator

      - name: Build Linux amd64 executable
        run: GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$(cat version) -X main.LastCommit=$(git rev-list -1 HEAD)" -o ./linux_amd64/traffic-generator

      - name: Build Linux ARM executable
        run: GOOS=linux GOARCH=arm go build -ldflags "-X main.Version=$(cat version) -X main.LastCommit=$(git rev-list -1 HEAD)" -o ./linux_arm/traffic-generator

      - name: Create release zip packages
        run: |
          zip -r windows.zip windows/
          zip -r mac.zip mac/
          zip -r linux_amd64.zip linux_amd64/
          zip -r linux_arm.zip linux_arm/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows package
        id: upload-windows-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Mac package
        id: upload-mac-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac.zip
          asset_name: mac.zip
          asset_content_type: application/zip

      - name: Upload Linux amd64 package
        id: upload-linux_amd64_-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux_amd64.zip
          asset_name: linux_amd64.zip
          asset_content_type: application/zip

      - name: Upload Linux ARM package
        id: upload-linux_arm-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux_arm.zip
          asset_name: linux_arm.zip
          asset_content_type: application/zip
